version: '3.5'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
    name: frontend
    external: true
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  redis:
    driver: ${VOLUMES_DRIVER}

services:

    ### PHP-FPM ##############################################
    php-fpm-tnk:
      build:
        context: ./php-fpm
        args:
          - APP_ENV=${APP_ENV}
          - PROJECT_PHP_VERSION=${PHP_VERSION}
          - PUID=${PHP_FPM_PUID}
          - PGID=${PHP_FPM_PGID}
          - http_proxy
          - https_proxy
          - no_proxy
      restart: unless-stopped
      volumes:
        - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
        - ${DATA_PATH_HOST}/xdebug/profiler:/xdebug/phpstorm/tmp/profiling
      expose:
        - "9000"
      extra_hosts:
        - "host.docker.internal:host-gateway"
      environment:
        - XDEBUG_MODE=${XDEBUG_MODE}
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
        - DOCKER_TLS_VERIFY=1
        - DOCKER_TLS_CERTDIR=/certs
        - DOCKER_CERT_PATH=/certs/client
      networks:
        - backend
        - frontend

    ### Laravel Horizon ############################################
    laravel-horizon:
      build:
        context: ./laravel-horizon
        args:
          - PROJECT_PHP_VERSION=${PHP_VERSION}
          - PUID=${LARAVEL_HORIZON_PUID}
          - PGID=${LARAVEL_HORIZON_PGID}
      restart: unless-stopped
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ./laravel-horizon/supervisord.d:/etc/supervisord.d
      depends_on:
        - redis
      extra_hosts:
        - "host.docker.internal:host-gateway"
      networks:
        - backend
        - frontend

    ### NGINX Server #########################################
    nginx:
      build:
        context: ./nginx
        args:
          - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
          - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
          - http_proxy
          - https_proxy
          - no_proxy
      restart: unless-stopped
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
        - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
        - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
        - ${NGINX_SSL_PATH}:/etc/nginx/ssl
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.entrypoints=https"
        - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.rule=Host(`${APP_ADDRESS}`)"
        - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.tls=true"
        - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.tls.certresolver=letsEncrypt"
        - "traefik.http.middlewares.${COMPOSE_PROJECT_NAME}-compress.compress=true"
        - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.middlewares=${COMPOSE_PROJECT_NAME}-compress"
        - "traefik.http.services.${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=80"
        - "traefik.docker.network=frontend"
        - "traefik.backend=nginx"
      depends_on:
        - php-fpm-tnk
      networks:
        - frontend
        - backend

    ### PostgreSQL ################################################
    postgres:
      build:
        context: ./postgres
        args:
          - POSTGRES_VERSION=${POSTGRES_VERSION}
      shm_size: 4g
      ports:
          - ${POSTGRES_PORT}:5432
      restart: unless-stopped
      volumes:
        - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
      environment:
        POSTGRES_DB: ${POSTGRES_DATABASE}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        TZ: UTC
      networks:
        - backend

    pgbackups:
        image: prodrigestivill/postgres-backup-local
        restart: unless-stopped
        user: postgres:postgres # Optional: see below
        volumes:
            - ${APP_BACKUPS_FOLDER}/postgres:/backups
        links:
            - postgres
        depends_on:
            - postgres
        environment:
            - POSTGRES_HOST=postgres
            - POSTGRES_DB=${POSTGRES_DATABASE}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            #  - POSTGRES_PASSWORD_FILE=/run/secrets/db_password <-- alternative for POSTGRES_PASSWORD (to use with docker secrets)
            - POSTGRES_EXTRA_OPTS=-Z6 --schema=public --blobs
            - SCHEDULE=@daily
            - BACKUP_KEEP_DAYS=7
            - BACKUP_KEEP_WEEKS=4
            - BACKUP_KEEP_MONTHS=6
            - HEALTHCHECK_PORT=8080
        networks:
            - backend

    ### Redis ################################################
    redis:
      build: ./redis
      restart: unless-stopped
      command: redis-server --appendonly yes --replica-read-only no
      volumes:
        - ${DATA_PATH_HOST}/redis:/data
      ports:
        - "${REDIS_PORT}:6379"
      networks:
        - backend

    ### TRAEFIK #########################################
    traefik:
        build:
            context: ./traefik
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - /etc/localtime:/etc/localtime:ro
            - ./traefik/certs:/certs/
            - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
            - ./traefik/data:/data
        command:
            - "--api"
            - "--providers.docker.exposedbydefault=false"
            - "--accesslog.filepath=/data/access.log"
            # entrypoints
            - "--entrypoints.http.address=:${TRAEFIK_HOST_HTTP_PORT}"
            - "--entrypoints.http.http.redirections.entrypoint.to=https"
            - "--entrypoints.https.address=:${TRAEFIK_HOST_HTTPS_PORT}"
            - "--entrypoints.traefik.address=:${TRAEFIK_DASHBOARD_PORT}"
            # certificatesresolvers
            - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
            - "--certificatesresolvers.letsencrypt.acme.storage=/data/acme.json"
            - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http"
        ports:
            - "${TRAEFIK_HOST_HTTP_PORT}:${TRAEFIK_HOST_HTTP_PORT}"
            - "${TRAEFIK_HOST_HTTPS_PORT}:${TRAEFIK_HOST_HTTPS_PORT}"
            - "${TRAEFIK_DASHBOARD_PORT}:${TRAEFIK_DASHBOARD_PORT}"
            - "8080:8080"
        networks:
            - frontend
            - backend
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.traefik.rule=Host(`${ACME_DOMAIN}`)"
            - "traefik.http.routers.traefik.entrypoints=traefik"
            - "traefik.http.routers.traefik.service=api@internal"
            - "traefik.http.routers.traefik.middlewares=access-auth"
            - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
            - "traefik.http.middlewares.access-auth.basicauth.realm=Login Required"
            - "traefik.http.middlewares.access-auth.basicauth.users=${TRAEFIK_DASHBOARD_USER}"

    ### Mailpit ##############################################
    mailpit:
        build: ./mailpit
        ports:
            - "1025:1025"
            - "8025:8025"
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=frontend"
            - "traefik.backend=mailpit"

            - "traefik.http.routers.smtp-http.entrypoints=https"
            - "traefik.http.routers.smtp-http.rule=Host(`mailpit.loc`)"
            - "traefik.http.routers.smtp-http.tls=true"
            - "traefik.http.services.smtp-http.loadbalancer.server.port=8025"
        networks:
            - frontend
            - backend
